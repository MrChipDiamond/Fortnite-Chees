// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.220531.1

#pragma once
#ifndef WINRT_fnsln_0_H
#define WINRT_fnsln_0_H
WINRT_EXPORT namespace winrt::fnsln
{
    struct Iexported;
    struct exported;
}
namespace winrt::impl
{
    template <> struct category<winrt::fnsln::Iexported>{ using type = interface_category; };
    template <> struct category<winrt::fnsln::exported>{ using type = class_category; };
    template <> inline constexpr auto& name_v<winrt::fnsln::exported> = L"fnsln.exported";
    template <> inline constexpr auto& name_v<winrt::fnsln::Iexported> = L"fnsln.Iexported";
    template <> inline constexpr guid guid_v<winrt::fnsln::Iexported>{ 0x17AC5FF9,0xCEF4,0x5A90,{ 0x8D,0xFD,0x91,0xCC,0xB0,0xA8,0x7C,0x09 } }; // 17AC5FF9-CEF4-5A90-8DFD-91CCB0A87C09
    template <> struct default_interface<winrt::fnsln::exported>{ using type = winrt::fnsln::Iexported; };
    template <> struct abi<winrt::fnsln::Iexported>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_MyProperty(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_MyProperty(int32_t) noexcept = 0;
        };
    };
    template <typename D>
    struct consume_fnsln_Iexported
    {
        [[nodiscard]] auto MyProperty() const;
        auto MyProperty(int32_t value) const;
    };
    template <> struct consume<winrt::fnsln::Iexported>
    {
        template <typename D> using type = consume_fnsln_Iexported<D>;
    };
}
#endif
